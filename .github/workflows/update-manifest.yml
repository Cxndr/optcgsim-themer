name: Update Image Manifest

on:
  # Run manually
  workflow_dispatch:
  
  # Run daily at 2 AM UTC to check for new images
  schedule:
    - cron: '0 2 * * *'
  
  # Run when someone pushes to main (in case Google Drive setup changes)
  push:
    branches: [ main ]
    paths:
      - 'scripts/generate-image-manifest.js'
      - '.env.local'
      - 'src/utils/googleDrive.ts'

jobs:
  update-manifest:
    runs-on: ubuntu-latest
    
    # Add explicit permissions for the GITHUB_TOKEN
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Use the GITHUB_TOKEN with explicit permissions
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Store current manifest info
        run: |
          if [ -f "public/image-manifest.json" ]; then
            echo "OLD_COUNT=$(jq '. | length' public/image-manifest.json)" >> $GITHUB_ENV
            echo "OLD_HASH=$(sha256sum public/image-manifest.json | cut -d' ' -f1)" >> $GITHUB_ENV
          else
            echo "OLD_COUNT=0" >> $GITHUB_ENV
            echo "OLD_HASH=none" >> $GITHUB_ENV
          fi
        
      - name: Generate new manifest
        env:
          GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: npm run generate-manifest
        
      - name: Check for meaningful changes
        id: verify-changes
        run: |
          if [ -f "public/image-manifest.json" ]; then
            NEW_COUNT=$(jq '. | length' public/image-manifest.json)
            NEW_HASH=$(sha256sum public/image-manifest.json | cut -d' ' -f1)
            
            echo "📊 Manifest comparison:"
            echo "   Old: $OLD_COUNT images (hash: ${OLD_HASH:0:8}...)"
            echo "   New: $NEW_COUNT images (hash: ${NEW_HASH:0:8}...)"
            
            if [ "$OLD_HASH" != "$NEW_HASH" ]; then
              echo "🔄 Changes detected!"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "old_count=$OLD_COUNT" >> $GITHUB_OUTPUT
              echo "new_count=$NEW_COUNT" >> $GITHUB_OUTPUT
              
              if [ "$NEW_COUNT" -gt "$OLD_COUNT" ]; then
                DIFF=$((NEW_COUNT - OLD_COUNT))
                echo "message=Added $DIFF new images ($OLD_COUNT → $NEW_COUNT)" >> $GITHUB_OUTPUT
              elif [ "$NEW_COUNT" -lt "$OLD_COUNT" ]; then
                DIFF=$((OLD_COUNT - NEW_COUNT))
                echo "message=Removed $DIFF images ($OLD_COUNT → $NEW_COUNT)" >> $GITHUB_OUTPUT
              else
                echo "message=Updated image metadata ($NEW_COUNT images)" >> $GITHUB_OUTPUT
              fi
            else
              echo "✅ No changes detected"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Failed to generate manifest"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit and push changes
        if: steps.verify-changes.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/image-manifest.json
          git commit -m "chore: ${{ steps.verify-changes.outputs.message }} [skip ci]"
          git push
          
      - name: Refresh application cache
        if: steps.verify-changes.outputs.changed == 'true'
        run: |
          echo "🔄 Triggering cache refresh in production..."
          RESPONSE=$(curl -w "HTTP_CODE:%{http_code}" -X POST \
            -H "Authorization: Bearer ${{ secrets.CACHE_REFRESH_SECRET }}" \
            -H "Content-Type: application/json" \
            -d '{"source": "github-action", "manifest_updated": true, "image_count": ${{ steps.verify-changes.outputs.new_count }}}' \
            https://www.optcgsimthemer.com/api/refresh-cache 2>/dev/null)
          
          HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Cache refresh successful!"
            echo "Response: $BODY"
          else
            echo "❌ Cache refresh failed with HTTP code: $HTTP_CODE"
            echo "Response: $BODY"
            echo "⚠️ Manifest was updated but cache refresh failed. You may need to refresh manually."
            exit 0  # Don't fail the workflow, just warn
          fi
          
      - name: Create summary
        run: |
          echo "## 🖼️ Image Manifest Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.verify-changes.outputs.changed }}" == "true" ]; then
            echo "✅ **Changes detected and committed**" >> $GITHUB_STEP_SUMMARY
            echo "- ${{ steps.verify-changes.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No changes detected**" >> $GITHUB_STEP_SUMMARY
            echo "- Manifest is up to date with Google Drive" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Manifest Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- Images: $(jq '. | length' public/image-manifest.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Last updated: $(date)" >> $GITHUB_STEP_SUMMARY 